@page "/search"
@using global::Shared.Model
@inject HttpClient Http

<h3>Søg efter dokumenter</h3>

<input type="text" @bind="query" placeholder="Indtast søgeord..." />
<button @onclick="SearchDocuments">Søg</button>

@if (resultCount > 0)
{
    <p>@resultCount dokumenter fundet:</p>

    <button @onclick="ToggleSortById">Sortér efter ID @sortDirectionID</button>
    <button @onclick="ToggleSortByCount">Sortér efter Antal @sortDirectionID</button>

    <table class="table">
        <thead>
            <tr>
                <th>Count</th>
                <th>URL</th>
                <th>Indekseringstidspunkt</th>
                <th>ID</th>
                <th>Oprettelsestidspunkt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in searchResults)
            {
                <tr>
                    <td>@doc.Count</td>
                    <td>@doc.GetShortUrl()</td>
                    <td>@doc.IdxTime</td>
                    <td>@doc.Id</td>
                    <td>@doc.CreationTime</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Ingen resultater fundet</p>
}

@code {
    private string query;
    private List<ResultDocument> searchResults = new();
    private int resultCount;
    private bool sortAscendingID = true; // To toggle sorting direction
    private bool sortAscendingCount = false;
    private string sortDirectionID = "↑"; // Indicator for sorting direction
    private string sortDirectionCount = "↑";

    private async Task SearchDocuments()
    {
        if (string.IsNullOrWhiteSpace(query)) return;

        var response = await Http.GetFromJsonAsync<SearchResponse>($"api/Search?query={query}");

        searchResults = response.Results;
        resultCount = response.Count;
    }

    //################################### Toggle and sort by ID
    private void ToggleSortById()
    {
        if (sortAscendingID)
        {
            searchResults = searchResults.OrderBy(doc => doc.Id).ToList();
            sortDirectionID = "↑";
        }
        else
        {
            searchResults = searchResults.OrderByDescending(doc => doc.Id).ToList();
            sortDirectionID = "↓";
        }

        sortAscendingID = !sortAscendingID; // Toggle for next click
    }
    //################################### Toggle and sort by ID


    //################################### Toggle and sort by Count
    private void ToggleSortByCount()
    {
        if (sortAscendingCount)
        {
            searchResults = searchResults.OrderBy(doc => doc.Count).ToList();
            sortDirectionCount = "↑";
        }
        else
        {
            searchResults = searchResults.OrderByDescending(doc => doc.Count).ToList();
            sortDirectionCount = "↓";
        }

        sortAscendingCount = !sortAscendingCount; // Toggle for next click
    }
    //################################### Toggle and sort by ID

    public class SearchResponse
    {
        public List<ResultDocument> Results { get; set; }
        public int Count { get; set; }
    }
}
